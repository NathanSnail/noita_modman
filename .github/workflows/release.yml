name: release

on: [push, pull_request]

jobs:
  build-manager-linux:
    name: Build manager for linux
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu
      - name: Install extra deps
        run: sudo apt-get update && sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev gcc-mingw-w64-i686 gcc-mingw-w64 libasound2-dev libjack-dev

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: noita-proxy -> target

      - name: Build Linux proxy release
        run: cargo build --release
        working-directory: .

      - uses: actions/upload-artifact@v4
        with:
          name: linux_x86_64_noita_modman
          path: target/release/noita_modman

  build-manager-windows:
    name: Build manager for windows
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: noita-proxy -> target

      - name: Build Windows proxy release
        run: cargo build --release
        working-directory: .

      - uses: actions/upload-artifact@v4
        with:
          name: windows_x86_64_noita_modman.exe
          path: target/release/noita_modman.exe

  release:
    name: Release
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    needs: [build-manager-linux, build-manager-windows]

    steps:
    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: <tofill>
        release_name: <tofill>
        draft: true
        prerelease: false

    - uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./my-artifact.zip
        asset_name: my-artifact.zip
        asset_content_type: application/zip

    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
